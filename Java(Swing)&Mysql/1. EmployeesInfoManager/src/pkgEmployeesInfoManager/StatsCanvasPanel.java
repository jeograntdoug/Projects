package pkgEmployeesInfoManager;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.util.Map;

public class StatsCanvasPanel extends javax.swing.JPanel {

    
    private int canvasWidth;
    private int canvasHeight;
    public static Map<Weekday,Integer> statsMap = EmployeeSchedule.statsMap;
    private int dataMax = 15;
    
    public StatsCanvasPanel() {
        //initComponents();
    }

    public void setDataMax(int dataMax){ this.dataMax = dataMax;}
    public void setStatsMap(Map<Weekday,Integer> statsMap){ this.statsMap = statsMap;}
    
    @Override
    public Dimension getPreferredSize() {
        return new Dimension(430, 200);
    }

    protected void paintComponent(Graphics g) {
        if(statsMap == null || dataMax == 0){
            return;
        }
        super.paintComponent(g);
        
        

        canvasWidth = getWidth();
        canvasHeight = getHeight();
        
        if (canvasWidth < 150 || canvasHeight < 50) {
            System.out.println("INTERNAL ERROR: Canvas is Too small");
            return;
        }

        Graphics2D g2d = (Graphics2D) g.create();

        int gap = 5;
        int width = (int)(((double)canvasWidth - 8*gap) / 7);
        double ratio = (double) (canvasHeight - gap*2) / dataMax;

        g2d.translate(gap, 0);
        int count = 0;
        for (Weekday m : Weekday.values()) {
            //draw rectangle
            int value = statsMap.get(m);
            int height = (int) (ratio * value);
            
            g2d.drawRect(0, canvasHeight - height, width, height);
            g2d.setFont(new Font("TimesRoman", Font.BOLD, 16)); 
            g2d.drawString(
                    "" + value
                    ,0,canvasHeight
            );
            
            AffineTransform affineTransform = new AffineTransform();
            affineTransform.rotate(Math.toRadians(-90), 0, 0);
            Font origFont = new Font("TimesRoman", Font.PLAIN, 10);
            Font rotatedFont = origFont.deriveFont(affineTransform);
            g2d.setFont(rotatedFont); 
            g2d.drawString(
                    m.toString().substring(0, 3)
                    ,10,canvasHeight - 20
            );
                        
            g2d.translate(gap + width, 0);
        }

        g2d.dispose();
    }

    protected void drawRectagle() {

    }

    protected void drawLetters() {

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 398, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 298, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
